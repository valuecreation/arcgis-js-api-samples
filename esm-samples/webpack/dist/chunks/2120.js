"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2120],{62120:(e,s,r)=>{r.r(s),r.d(s,{default:()=>c}),r(15572);var t=r(32911),o=r(79031),i=r(62296),l=r(58255),n=r(3982);const c=class{async decode(e){const s=await(0,o.Jx)(e.data,e.options);return s&&s.toJSON()}symbolize(e){e.pixelBlock=t.Z.fromJSON(e.pixelBlock),e.extent=e.extent?n.Z.fromJSON(e.extent):null;const s=this.symbolizer.symbolize(e);return Promise.resolve(s&&s.toJSON())}async updateSymbolizer(e){var s;this.symbolizer=l.Z.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===(null==(s=this.symbolizer)?void 0:s.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const s=this.symbolizer.simpleStretch(t.Z.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(s&&s.toJSON())}estimateStatisticsHistograms(e){const s=(0,i.Hv)(t.Z.fromJSON(e.srcPixelBlock));return Promise.resolve(s)}split(e){const s=(0,i.Vl)(t.Z.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return s&&s.forEach(((e,r)=>{s.set(r,null==e?void 0:e.toJSON())})),Promise.resolve(s)}async mosaicAndTransform(e){const s=e.srcPixelBlocks.map((e=>e?new t.Z(e):null)),r=(0,i.us)(s,e.srcMosaicSize,null,null,e.alignmentInfo);if(!e.coefs)return r&&r.toJSON();const o=(0,i.Uk)(r,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return o&&o.toJSON()}}}}]);