{"version":3,"sources":["components/WebMapView.js","reportWebVitals.js","index.js"],"names":["WebMapView","mapRef","useRef","useEffect","loadModules","css","then","ArcGISMap","MapView","GeoJSONLayer","map","basemap","geojsonLayer","url","copyright","popupTemplate","title","content","fieldInfos","fieldName","format","dateFormat","renderer","type","field","symbol","color","outline","visualVariables","stops","value","size","add","view","container","current","center","zoom","destroy","className","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNAIaA,G,MAAa,WACtB,IAAMC,EAASC,mBAkFf,OAhFAC,qBACE,WAEEC,sBAAY,CAAC,WAAY,qBAAuB,4BAA8B,CAAEC,KAAK,IACpFC,MAAK,YAAyC,IAAD,mBAAtCC,EAAsC,KAA3BC,EAA2B,KAAlBC,EAAkB,KAEtCC,EAAM,IAAIH,EAAU,CACtBI,QAAS,gBA8CPC,EAAe,IAAIH,EAAa,CACpCI,IA5CU,8EA6CVC,UAAW,mBACXC,cA5Ce,CACfC,MAAO,kBACPC,QAAS,+CACTC,WAAY,CACV,CACEC,UAAW,OACXC,OAAQ,CACNC,WAAY,4BAsClBC,SAhCe,CACfC,KAAM,SACNC,MAAO,MACPC,OAAQ,CACNF,KAAM,gBACNG,MAAO,SACPC,QAAS,CACPD,MAAO,UAGXE,gBAAiB,CACf,CACEL,KAAM,OACNC,MAAO,MACPK,MAAO,CACL,CACEC,MAAO,IACPC,KAAM,OAER,CACED,MAAO,EACPC,KAAM,cAchBrB,EAAIsB,IAAIpB,GAGR,IAAMqB,EAAO,IAAIzB,EAAQ,CACvB0B,UAAWjC,EAAOkC,QAClBzB,IAAKA,EACL0B,OAAQ,CAAC,WAAY,WACrBC,KAAM,IAGR,OAAO,WACDJ,GAEFA,EAAKK,iBAOR,qBAAKC,UAAU,SAASC,IAAKvC,MC3EzBwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.395c1d32.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { loadModules } from 'esri-loader';\nimport './WebMapView.css';\n\nexport const WebMapView = () => {\n    const mapRef = useRef();\n\n    useEffect(\n      () => {\n        // lazy load the required ArcGIS API for JavaScript modules and CSS\n        loadModules(['esri/Map', 'esri/views/MapView',  \"esri/layers/GeoJSONLayer\",], { css: true })\n        .then(([ArcGISMap, MapView, GeoJSONLayer]) => {\n\n          const map = new ArcGISMap({\n              basemap: 'topo-vector'\n          });\n\n          const url = \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson\";\n\n          const template = {\n            title: \"Earthquake Info\",\n            content: \"Magnitude {mag} {type} hit {place} on {time}\",\n            fieldInfos: [\n              {\n                fieldName: \"time\",\n                format: {\n                  dateFormat: \"short-date-short-time\"\n                }\n              }\n            ]\n          };\n\n          const renderer = {\n            type: \"simple\",\n            field: \"mag\",\n            symbol: {\n              type: \"simple-marker\",\n              color: \"orange\",\n              outline: {\n                color: \"white\"\n              }\n            },\n            visualVariables: [\n              {\n                type: \"size\",\n                field: \"mag\",\n                stops: [\n                  {\n                    value: 2.5,\n                    size: \"4px\"\n                  },\n                  {\n                    value: 8,\n                    size: \"40px\"\n                  }\n                ]\n              }\n            ]\n          };\n\n          const geojsonLayer = new GeoJSONLayer({\n            url: url,\n            copyright: \"USGS Earthquakes\",\n            popupTemplate: template,\n            renderer: renderer //optional\n          });\n\n          map.add(geojsonLayer);\n\n          // load the map view at the ref's DOM node\n          const view = new MapView({\n            container: mapRef.current,\n            map: map,\n            center: [139.767125, 35.681236],\n            zoom: 3\n          });\n\n          return () => {\n            if (view) {\n              // destroy the map view\n              view.destroy();\n            }\n          };\n        });\n      }\n    );\n\n    return <div className=\"webmap\" ref={mapRef} />;\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { WebMapView } from './components/WebMapView';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WebMapView />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}